# vim ft=yaml
# Multiple lines can be made a single "virtual line" because of how Travis
# munges each line before executing it to print out the exit status.  It's okay
# for it to be on multiple physical lines, so long as you remember: - There
# can't be any leading "-"s - All newlines will be removed, so use ";"s
language: python

# Run jobs on container-based infrastructure, can be overridden per job
sudo: false

cache:
  directories:
    - $HOME/.cache/pip

addons:
  apt:
    packages:
      - libhdf5-serial-dev

env:
    global:
        - DEPENDS="numpy scipy matplotlib h5py"
        - PYDICOM=1
python:
    - 2.6
    - 3.2
    - 3.3
    - 3.4
    - 3.5
matrix:
  include:
    - python: 2.7
      env:
        - COVERAGE=1
    # Absolute minimum dependencies
    - python: 2.7
      env:
        - DEPENDS=numpy==1.5.1 PYDICOM=0
    # Minimum pydicom dependency
    - python: 2.7
      env:
        - DEPENDS="numpy==1.5.1 pydicom==0.9.7"
    # Documentation doctests
    - python: 2.7
      env:
        - DOC_DOC_TEST=1
before_install:
    - source tools/travis_tools.sh
    - virtualenv --python=python venv
    - source venv/bin/activate
    - python --version # just to check
    - pip install -U pip  # upgrade to latest pip to find 3.5 wheels
    - retry pip install nose # always
    - wheelhouse_pip_install $DEPENDS
    # pydicom <= 0.9.8 doesn't install on python 3
    - if [ "${TRAVIS_PYTHON_VERSION:0:1}" == "2" ]; then
        if [ "$PYDICOM" == "1" ]; then
            pip install pydicom;
        fi
      fi
    - if [ "${COVERAGE}" == "1" ]; then
      pip install coverage;
      pip install coveralls;
      fi
# command to install dependencies
install:
    - python setup.py install
    # Point to nibabel data directory
    - export NIBABEL_DATA_DIR="$PWD/nibabel-data"
# command to run tests, e.g. python setup.py test
script:
    # Change into an innocuous directory and find tests from installation
    - mkdir for_testing
    - cd for_testing
    - if [ "${COVERAGE}" == "1" ]; then
      cp ../.coveragerc .;
      COVER_ARGS="--with-coverage --cover-package nibabel";
      fi
    - if [ "$DOC_DOC_TEST" == "1" ]; then
      pip install sphinx;
      cd ../doc;
      make html;
      make doctest;
      else
      nosetests --with-doctest $COVER_ARGS nibabel;
      fi
after_success:
    - if [ "${COVERAGE}" == "1" ]; then coveralls; fi
